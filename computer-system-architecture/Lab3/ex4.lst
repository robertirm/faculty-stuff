     1                                  bits 32 
     2                                  
     3                                  global start        
     4                                  
     5                                  extern exit               
     6                                  import exit msvcrt.dll    
     7                                  
     8                                  ; Interpretare cu semn
     9                                  ; a,b-byte; c-word; e-doubleword; x-qword
    10                                  segment data use32 class=data
    11 00000000 64                          a db 100
    12 00000001 EC                          b db -20
    13 00000002 0200                        c dw 2
    14 00000004 F6FFFFFF                    e dd -10
    15 00000008 0600000000000000            x dq 6
    16                                  
    17                                  ;(a-b+c*128)/(a+b)+e-x
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 66B88000                        mov ax,128
    21 00000004 66F72D[02000000]                imul word [c]         ; DX:AX = c*128
    22                                          
    23 0000000B 6652                            push dx
    24 0000000D 6650                            push ax
    25 0000000F 5B                              pop ebx         ; EBX = c*128
    26                                          
    27 00000010 A0[00000000]                    mov al,[a]
    28 00000015 2A05[01000000]                  sub al,[b]
    29 0000001B 6698                            cbw
    30 0000001D 98                              cwde            ; EAX = a-b
    31                                  
    32 0000001E 01D8                            add eax,ebx     ; EAX = a-b+c*128
    33                                          
    34 00000020 50                              push eax        ;retinem EAX = a-b+c*128 pe stiva
    35                                       
    36 00000021 A0[00000000]                    mov al,[a]
    37 00000026 0205[01000000]                  add al,[b]      ; Al = a+b
    38 0000002C 6698                            cbw             ; AX = a+b
    39                                          
    40 0000002E 6689C3                          mov bx,ax       ; BX = a+b
    41 00000031 66F7FB                          idiv bx         
    42                                          
    43 00000034 6658                            pop ax
    44 00000036 665A                            pop dx          ; DX:AX = a-b+c*128
    45                                          
    46 00000038 66F7FB                          idiv bx         ; AX = (DX:AX)/BX = (a-b+c*128)/(a+b)   , DX = restul
    47                                          
    48 0000003B 6699                            cwd             ; EAX = (a-b+c*128)/(a+b)
    49 0000003D 0305[04000000]                  add eax,[e]     ; EAX = (a-b+c*128)/(a+b)+e
    50 00000043 99                              cdq             ; EDX:EAX = (a-b+c*128)/(a+b)+e
    51                                          
    52 00000044 2B05[08000000]                  sub eax,[x]
    53 0000004A 1B15[0C000000]                  sbb edx,[x+4]    ; EDX:EAX = (a-b+c*128)/(a+b)+e-x
    54                                          
    55 00000050 6A00                            push    dword 0      
    56 00000052 FF15[00000000]                  call    [exit]       
